/* Generated By:JJTree&JavaCC: Do not edit this line. TeiidSyntaxParserTokenManager.java */
/*
* JBoss, Home of Professional Open Source.
* See the COPYRIGHT.txt file distributed with this work for information
* regarding copyright ownership. Some portions may be licensed
* to Red Hat, Inc. under one or more contributor license agreements.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
* 02110-1301 USA.
*/
package org.komodo.modeshape.teiid.parser.syntax;
import org.komodo.modeshape.teiid.sql.lang.*;
import java.math.BigInteger;
import java.util.*;
import java.util.regex.Matcher;
import org.komodo.modeshape.teiid.parser.AbstractTeiidParser;
import org.komodo.modeshape.teiid.parser.ParseInfo;
import org.komodo.modeshape.teiid.sql.lang.Command;
import org.komodo.modeshape.teiid.sql.lang.Criteria;
import org.komodo.modeshape.teiid.sql.proc.Statement;
import org.komodo.modeshape.teiid.sql.symbol.Expression;
import org.komodo.spi.runtime.version.ITeiidVersion;
import org.komodo.spi.runtime.version.TeiidVersion;
import org.komodo.spi.runtime.version.TeiidVersion.Version;
import org.komodo.spi.constants.StringConstants;
import org.komodo.modeshape.teiid.Messages;
import org.komodo.utils.StringUtil;
import org.komodo.modeshape.teiid.parser.TeiidSQLConstants;
import org.komodo.modeshape.teiid.parser.bnf.BNF;

/** Token Manager. */
public class TeiidSyntaxParserTokenManager implements TeiidSyntaxParserConstants
{
        int commentNestingDepth;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   switch (pos)
   {
      case 0:
         if ((active6 & 0x10L) != 0L)
            return 42;
         if ((active6 & 0x2L) != 0L)
            return 1;
         if ((active0 & 0x200000000L) != 0L || (active4 & 0x1ffffc0L) != 0L || (active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 370;
            return 9;
         }
         if ((active0 & 0xfffffffdfffffe00L) != 0L || (active1 & 0xffffffff003fffffL) != 0L || (active2 & 0xfffffffffc07ffffL) != 0L || (active3 & 0x87f7ffffffffffffL) != 0L || (active4 & 0xdfdfff7ffe00003fL) != 0L || (active5 & 0x1e9de7ffffbebL) != 0L)
         {
            jjmatchedKind = 370;
            return 56;
         }
         if ((active1 & 0xffc00000L) != 0L || (active2 & 0x3f80000L) != 0L || (active3 & 0x7808000000000000L) != 0L || (active4 & 0x2020008000000000L) != 0L || (active5 & 0x122180000414L) != 0L)
         {
            jjmatchedKind = 370;
            return 57;
         }
         return -1;
      case 1:
         if ((active0 & 0xffefe7fffffbde00L) != 0L || (active1 & 0x8006ffffffffffffL) != 0L || (active2 & 0xfffffff3921fffffL) != 0L || (active3 & 0xffdf9fffffefffffL) != 0L || (active4 & 0xbfffffbfffffffffL) != 0L || (active5 & 0x1feffffffef9fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 1;
            }
            return 56;
         }
         if ((active0 & 0x10180000042000L) != 0L || (active1 & 0x7ff9000000000000L) != 0L || (active2 & 0xc6de00000L) != 0L || (active3 & 0x20600000100000L) != 0L || (active4 & 0x4000004000000000L) != 0L || (active5 & 0x10000001060L) != 0L)
            return 56;
         return -1;
      case 2:
         if ((active0 & 0xffefe64dfbfbfe00L) != 0L || (active1 & 0xc3f6eee7feffb7ffL) != 0L || (active2 & 0xf3ffff8bcaaf7fffL) != 0L || (active3 & 0xffdee7ffffeff877L) != 0L || (active4 & 0xffe1bbfffe00003fL) != 0L || (active5 & 0x1fbfffe00ffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 2;
            }
            return 56;
         }
         if ((active0 & 0x11b204040000L) != 0L || (active1 & 0x1c00111801004800L) != 0L || (active2 & 0xc00007011108000L) != 0L || (active3 & 0x21180000000788L) != 0L || (active4 & 0x1e440001ffffc0L) != 0L || (active5 & 0x40001ff0000L) != 0L)
            return 56;
         return -1;
      case 3:
         if ((active0 & 0xfc8be6484775de00L) != 0L || (active1 & 0x4ff62e97ce1cf7ffL) != 0L || (active2 & 0xf3ffff6b082ffd9eL) != 0L || (active3 & 0xffcee8d3eee1ff37L) != 0L || (active4 & 0x6fe179ffffffffffL) != 0L || (active5 & 0x1ffdf6ffffa79L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 3;
            }
            return 56;
         }
         if ((active0 & 0x3640005b88a2000L) != 0L || (active1 & 0x9000c06030e30000L) != 0L || (active2 & 0x8000080c2800261L) != 0L || (active3 & 0x10072c110e0040L) != 0L || (active4 & 0x9000820000000000L) != 0L || (active5 & 0x2090000586L) != 0L)
            return 56;
         return -1;
      case 4:
         if ((active0 & 0xf2c3600867355e00L) != 0L || (active1 & 0x4f162294ec1ef5ffL) != 0L || (active2 & 0xf37e7f43082bcc4aL) != 0L || (active3 & 0xce4c6b8a2ced7737L) != 0L || (active4 & 0x4fc159fffff7ffefL) != 0L || (active5 & 0x19fd74bffeff8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 4;
            }
            return 56;
         }
         if ((active0 & 0xc08864000408000L) != 0L || (active1 & 0xe00c0302000200L) != 0L || (active2 & 0x81802800043194L) != 0L || (active3 & 0x31828051c2008800L) != 0L || (active4 & 0x2020200000080010L) != 0L || (active5 & 0x602824001001L) != 0L)
            return 56;
         return -1;
      case 5:
         if ((active0 & 0x9281440826055c00L) != 0L || (active1 & 0x4d160090601e717fL) != 0L || (active2 & 0x110e7f0000290c4aL) != 0L || (active3 & 0xcdcc6a0a08ed0736L) != 0L || (active4 & 0x4fc151dffff7ffafL) != 0L || (active5 & 0x18f8547ffe7f8L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 5;
            }
            return 56;
         }
         if ((active0 & 0x6042200041300200L) != 0L || (active1 & 0x20022048c008480L) != 0L || (active2 & 0xe27000430802c000L) != 0L || (active3 & 0x200018124007001L) != 0L || (active4 & 0x82000000040L) != 0L || (active5 & 0x105208000800L) != 0L)
            return 56;
         return -1;
      case 6:
         if ((active0 & 0x280440022210400L) != 0L || (active1 & 0x4d160080401e117fL) != 0L || (active2 & 0x110e4f0000010842L) != 0L || (active3 & 0xd806808006d4726L) != 0L || (active4 & 0x45c1410fff77fd8fL) != 0L || (active5 & 0x19f450fffe7e8L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 6;
            return 56;
         }
         if ((active0 & 0x9001000804045800L) != 0L || (active1 & 0x1020006000L) != 0L || (active2 & 0x20300200280408L) != 0L || (active3 & 0xc04c020208800010L) != 0L || (active4 & 0xa0010d000800220L) != 0L || (active5 & 0x8240000010L) != 0L)
            return 56;
         return -1;
      case 7:
         if ((active0 & 0x80000000010000L) != 0L || (active1 & 0x802008040120102L) != 0L || (active2 & 0x100010000010002L) != 0L || (active3 & 0xc00080800200220L) != 0L || (active4 & 0x500010002540003L) != 0L || (active5 & 0x80108000060L) != 0L)
            return 56;
         if ((active0 & 0x200440022200400L) != 0L || (active1 & 0x45140000000c107dL) != 0L || (active2 & 0x100e4e0000000840L) != 0L || (active3 & 0x1806000004d4506L) != 0L || (active4 & 0x40c1400ffd23fd8cL) != 0L || (active5 & 0x1974407ffe788L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 7;
            }
            return 56;
         }
         return -1;
      case 8:
         if ((active0 & 0x400002200000L) != 0L || (active1 & 0x1000000000c107dL) != 0L || (active2 & 0xc000000000840L) != 0L || (active3 & 0x2000000c4504L) != 0L || (active4 & 0x40c1400c7923388dL) != 0L || (active5 & 0x1844005ffe200L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 8;
            }
            return 56;
         }
         if ((active0 & 0x200040020000400L) != 0L || (active1 & 0x4414000000000000L) != 0L || (active2 & 0x10024e0000000000L) != 0L || (active3 & 0x180400000410002L) != 0L || (active4 & 0x38400c500L) != 0L || (active5 & 0x130402000588L) != 0L)
            return 56;
         return -1;
      case 9:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x10000000004007cL) != 0L || (active2 & 0x8000000000000L) != 0L || (active3 & 0x1000000000c4104L) != 0L || (active4 & 0x80000f7922108dL) != 0L || (active5 & 0x844001ff6380L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 9;
            return 56;
         }
         if ((active0 & 0x2200000L) != 0L || (active1 & 0x81001L) != 0L || (active2 & 0x4000000000840L) != 0L || (active3 & 0x200000000400L) != 0L || (active4 & 0x4041400000012800L) != 0L || (active5 & 0x1000004008000L) != 0L)
            return 56;
         return -1;
      case 10:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x4007cL) != 0L || (active3 & 0x1000000000c0104L) != 0L || (active4 & 0x378220085L) != 0L || (active5 & 0x840001ef6180L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 10;
            return 56;
         }
         if ((active1 & 0x100000000000000L) != 0L || (active2 & 0x8000000000000L) != 0L || (active3 & 0x4000L) != 0L || (active4 & 0x80000c01001008L) != 0L || (active5 & 0x4000100200L) != 0L)
            return 56;
         return -1;
      case 11:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x40004L) != 0L || (active3 & 0x1000000000c0000L) != 0L || (active4 & 0x378020080L) != 0L || (active5 & 0x840000c76100L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 11;
            }
            return 56;
         }
         if ((active1 & 0x78L) != 0L || (active3 & 0x104L) != 0L || (active4 & 0x200005L) != 0L || (active5 & 0x1280080L) != 0L)
            return 56;
         return -1;
      case 12:
         if ((active1 & 0x20L) != 0L || (active3 & 0x100000000080000L) != 0L || (active4 & 0x108000000L) != 0L || (active5 & 0x40000874000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 370;
               jjmatchedPos = 12;
            }
            return 56;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x40004L) != 0L || (active3 & 0x40000L) != 0L || (active4 & 0x270020080L) != 0L || (active5 & 0x800000402100L) != 0L)
            return 56;
         return -1;
      case 13:
         if ((active1 & 0x20L) != 0L || (active3 & 0x80000L) != 0L || (active4 & 0x60000000L) != 0L || (active5 & 0x810000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 13;
            return 56;
         }
         if ((active3 & 0x100000000000000L) != 0L || (active4 & 0x108000000L) != 0L || (active5 & 0x40000064000L) != 0L)
            return 56;
         return -1;
      case 14:
         if ((active1 & 0x20L) != 0L || (active4 & 0x60000000L) != 0L || (active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 14;
            return 56;
         }
         if ((active3 & 0x80000L) != 0L || (active5 & 0x800000L) != 0L)
            return 56;
         return -1;
      case 15:
         if ((active1 & 0x20L) != 0L || (active4 & 0x60000000L) != 0L || (active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 15;
            return 56;
         }
         return -1;
      case 16:
         if ((active4 & 0x20000000L) != 0L || (active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 16;
            return 56;
         }
         if ((active1 & 0x20L) != 0L || (active4 & 0x40000000L) != 0L)
            return 56;
         return -1;
      case 17:
         if ((active5 & 0x10000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 17;
            return 56;
         }
         if ((active4 & 0x20000000L) != 0L)
            return 56;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400L);
      case 36:
         return jjStopAtPos(0, 404);
      case 40:
         return jjStopAtPos(0, 386);
      case 41:
         return jjStopAtPos(0, 387);
      case 42:
         return jjStopAtPos(0, 399);
      case 43:
         return jjStopAtPos(0, 401);
      case 44:
         return jjStopAtPos(0, 384);
      case 45:
         return jjStopAtPos(0, 402);
      case 46:
         return jjStartNfaWithStates_0(0, 385, 1);
      case 47:
         jjmatchedKind = 400;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 406);
      case 59:
         return jjStopAtPos(0, 405);
      case 60:
         jjmatchedKind = 395;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1200L);
      case 61:
         return jjStopAtPos(0, 392);
      case 62:
         jjmatchedKind = 397;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000L);
      case 63:
         return jjStopAtPos(0, 403);
      case 91:
         return jjStopAtPos(0, 390);
      case 93:
         return jjStopAtPos(0, 391);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7ff000000000L, 0x0L, 0x0L, 0x780000000000L, 0x4000000000000L, 0x4006000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1f800082303000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffe0000d00020000L, 0x7ffL, 0x0L, 0x800000000000L, 0x800200000000000L, 0x400200000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xd000000L, 0x3ff800L, 0x0L, 0x7000000000000L, 0x401011ffe000000L, 0x400000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc00000L, 0x0L, 0x8000000000000L, 0x2020008000000000L, 0x120100000010L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0xff00000000L, 0x0L, 0x10000000000000L, 0x0L, 0x1L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00000000000L, 0x0L, 0x0L, 0x0L, 0x1000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x7fff000000000000L, 0x0L, 0x20000000000000L, 0x6000000000L, 0x10000001000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L, 0x0L, 0x0L, 0x1800000000000L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L, 0x3ffL, 0x1c0000000000000L, 0x0L, 0x2L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc00L, 0x600000000000000L, 0x18000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f80000L, 0x7800000000000000L, 0x0L, 0x2080000404L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x1fffc000000L, 0x0L, 0x4000000000000000L, 0x4000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7e0000000000L, 0x0L, 0x8000000000000000L, 0x40000000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000200L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0xfff800000000000L, 0x8000000000000000L, 0xc00000000000L, 0x200000000800L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x18200L, 0x0L, 0xf000000000000000L, 0x7fffL, 0xc2080000000007L, 0x19ff0008L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x30004000L, 0x0L, 0x0L, 0x1ff8000L, 0x1000100000000018L, 0x20001e0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7e000000L, 0x0L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L, 0x0L, 0x380000000L, 0x300020000000020L, 0x88000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fc00000000L, 0x0L, 0x20008000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L, 0x0L, 0x1ffffc0L, 0x40000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000000000L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 388, 42);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000L);
      case 125:
         return jjStopAtPos(0, 389);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active6 & 0x400L) != 0L)
            return jjStopAtPos(1, 394);
         else if ((active6 & 0x1000L) != 0L)
            return jjStopAtPos(1, 396);
         else if ((active6 & 0x4000L) != 0L)
            return jjStopAtPos(1, 398);
         break;
      case 62:
         if ((active6 & 0x200L) != 0L)
            return jjStopAtPos(1, 393);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e0000408000c00L, active1, 0x300100400800L, active2, 0x1000860000081c06L, active3, 0x840000180008000L, active4, 0x8310800002000020L, active5, 0x2800c0000402L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x3000000000000000L, active4, 0L, active5, 0x2000L, active6, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800004800000L, active1, 0x1020007f000L, active2, 0xc07f000000106019L, active3, 0x820304000001000fL, active4, 0x11c0000000000L, active5, 0x940a008804L, active6, 0L);
      case 70:
      case 102:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 112, 56);
         else if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000028000L, active1, 0L, active2, 0L, active3, 0x5c00020000L, active4, 0L, active5, 0x400000000000L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000032304000L, active1, 0x400180000L, active2, 0x800000000080e0L, active3, 0x3a2000c0010L, active4, 0x8030000000000L, active5, 0x20000181L, active6, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800006180400000L, active1, 0x20000800000L, active2, 0x10000000L, active3, 0x8080000000000L, active4, 0x1ffc000000L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200010000L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0x2000002001ffffc0L, active5, 0x40000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000040000L, active1, 0x1ff0000001000000L, active2, 0x40000000L, active3, 0x2000000e000000L, active4, 0xc000000000L, active5, 0x10100001000L, active6, 0L);
      case 79:
      case 111:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xf004000801081000L, active1, 0x8000c01800000007L, active2, 0xf00000001a70300L, active3, 0x180000000000040L, active4, 0xc00600000000000L, active5, 0x200000060L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x380000000L, active3, 0x20000020L, active4, 0x1L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x780L, active4, 0L, active5, 0x1ff0000L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8060000000000L, active1, 0xc2002200380L, active2, 0x780800000000L, active3, 0x10100001e00000L, active4, 0x5000000000000018L, active5, 0x4000000L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x4000000004000000L, active2, 0L, active3, 0x600050000000L, active4, 0L, active5, 0x1800000000000L, active6, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000200L, active1, 0L, active2, 0L, active3, 0x1800L, active4, 0xc0000000000000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0xc000000478L, active2, 0x7002000000L, active3, 0x4400000000000000L, active4, 0x2000000000004L, active5, 0x2800004208L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18000000000L, active3, 0L, active4, 0x24000000000000L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf8000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x120000000010L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0x4800000006000L, active4, 0x2L, active5, 0L, active6, 0L);
      case 124:
         if ((active6 & 0x800000L) != 0L)
            return jjStopAtPos(1, 407);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x60L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000830000L, active1, 0x40000001000L, active2, 0x4001000000000018L, active3, 0x40000601800L, active4, 0x8000000008L, active5, 0x401000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L, active4, 0x4L, active5, 0x8L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 56);
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0xc404000L, active2, 0x8002000000200100L, active3, 0x180800000000000L, active4, 0x400000000000000L, active5, 0x130100002000L);
      case 68:
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 56);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 56);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 56);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0x800030000L, active3, 0x20000000L, active4, 0x40c0000000000000L, active5, 0x20001000L);
      case 69:
      case 101:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 236, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000000000L, active1, 0x2000030000080L, active2, 0x198080000000L, active3, 0x18201c10020020L, active4, 0x20020000000011L, active5, 0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L, active2, 0xc000008000001L, active3, 0L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 306, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x800002300000L, active1, 0L, active2, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000080000100L, active2, 0x200000000000L, active3, 0x4046800000L, active4, 0x1000000000000000L, active5, 0x200010000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0xc60L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x3060000000000000L, active1, 0x404500008000L, active2, 0x300000042000000L, active3, 0xa400080180000701L, active4, 0x1ffffc0L, active5, 0x42609ff8000L);
      case 77:
      case 109:
         if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 305, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000030000000L, active1, 0x4000000000000L, active2, 0x80L, active3, 0x42000000000d0050L, active4, 0x2L, active5, 0x80000580L);
      case 78:
      case 110:
         if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000800084000L, active1, 0x20008000000003L, active2, 0x800000848002L, active3, 0x4008000000002L, active4, 0x801800004000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800200180409000L, active1, 0x40800a2000200200L, active2, 0x400000000200L, active3, 0L, active4, 0L, active5, 0x1800800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0x2000002008000000L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000e00L, active1, 0x100200047cL, active2, 0x2000060000002004L, active3, 0x2000200000000L, active4, 0x300080000000020L, active5, 0x88004000001L);
      case 83:
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 108, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x180000400000000L, active1, 0x3000000009b0000L, active2, 0L, active3, 0x6004L, active4, 0x14000000000L, active5, 0x40000802L);
      case 84:
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 56);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 152, 56);
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 195, 56);
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x5404008042000L, active1, 0x1c00000240040000L, active2, 0x30006300085000L, active3, 0x840032000000000L, active4, 0x8000000002000000L, active5, 0x4010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0x800000000000L, active2, 0L, active3, 0x1000000L, active4, 0x200ff0000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0x1040000000000000L, active3, 0L, active4, 0x1000000000L, active5, 0L);
      case 87:
      case 119:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 148, 56);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 88:
      case 120:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 308, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0x2000004L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 56);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 56);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 298, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x300400000000000L, active5, 0x1ff0000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xa060000400000L, active1, 0x4002080L, active2, 0x20000200100L, active3, 0x1184000020000000L, active4, 0x110020000d0L, active5, 0x4000000L);
      case 66:
      case 98:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 56);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400L, active1, 0x20000000000L, active2, 0L, active3, 0x200000000000000L, active4, 0x8000000100L, active5, 0x40L);
      case 67:
      case 99:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x480000000000800L, active1, 0x82200a0000L, active2, 0x480000001000L, active3, 0x20L, active4, 0xe01L, active5, 0x20L);
      case 68:
      case 100:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L, active2, 0x1000000000008L, active3, 0x8000000000L, active4, 0xc0000000001000L, active5, 0x41000000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 56);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 56);
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 56);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 56);
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 56);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 198, 56);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 216, 56);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 244, 56);
         else if ((active5 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4060040000L, active1, 0xf24001048048000L, active2, 0x100c002800000c40L, active3, 0xc0420000000c0101L, active4, 0x4006002L, active5, 0x104008003580L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000002006L, active3, 0x800000L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 56);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 56);
         else if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 319, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0x80000000004000L, active3, 0x30000000000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800004300200L, active1, 0x10200000000000L, active2, 0x300010080L, active3, 0x800000000200010L, active4, 0x4000080000010000L, active5, 0x480400000000L);
      case 75:
      case 107:
         if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 303, 56);
         break;
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 56);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 56);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1040000000011000L, active1, 0x4000000000005000L, active2, 0x300000000000000L, active3, 0x804000008000L, active4, 0L, active5, 0x32000008000L);
      case 77:
      case 109:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 56);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 316, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000200000000000L, active1, 0L, active2, 0x200000000000L, active3, 0x8400000000000L, active4, 0x4L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 56);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 56);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 209, 56);
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x2040000000000L, active2, 0L, active3, 0x200848400000L, active4, 0x200000020008L, active5, 0x1800000000000L);
      case 79:
      case 111:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L, active2, 0xa040000000000000L, active3, 0x2000080002000000L, active4, 0x2000000000L, active5, 0x100004000L);
      case 80:
      case 112:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 56);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 56);
         else if ((active5 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 348, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x104000000000L, active3, 0x10000L, active4, 0xc0000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000L, active4, 0x100000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 56);
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 220, 56);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 234, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000008000L, active1, 0x7cL, active2, 0x4000010000000000L, active3, 0x1000000800L, active4, 0x20000ff8000000L, active5, 0x210L);
      case 83:
      case 115:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x180000601L, active2, 0x8000000L, active3, 0x206L, active4, 0x1000000200000L, active5, 0x208040000009L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 56);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 56);
         else if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 321, 56);
         else if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 322, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400100102L, active2, 0x40000040000L, active3, 0x400000200007000L, active4, 0x2800104000c00000L, active5, 0x822000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0xc0080000000000L, active2, 0x320000000a8000L, active3, 0x180000000L, active4, 0x400000000000000L, active5, 0x200000800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 87:
      case 119:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 297, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 158, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1280000000000000L, active1, 0x4000020000004000L, active2, 0x300000000000L, active3, 0x8000000000000400L, active4, 0x180001460200L, active5, 0x880000000010L);
      case 66:
      case 98:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0L, active4, 0x10000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x10000000000000L, active2, 0x4000000000200000L, active3, 0x80000000001L, active4, 0L, active5, 0x4008000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0x400L, active3, 0L, active4, 0L, active5, 0x100000000L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 56);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 56);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 56);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 56);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 56);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 175, 56);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 56);
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 228, 56);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 230, 56);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 239, 56);
         else if ((active5 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 355, 56);
         else if ((active5 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 365, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x8041000802001000L, active1, 0x40000017cL, active2, 0x400008000000L, active3, 0x208400900006000L, active4, 0x8c1004008a00000L, active5, 0x41000000000L);
      case 70:
      case 102:
         if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 241, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0x8000L);
      case 71:
      case 103:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 222, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0x40L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 56);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 56);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 56);
         else if ((active5 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 349, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20L);
      case 73:
      case 105:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 275, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200000004400L, active1, 0x1000100002L, active2, 0xc0000000008L, active3, 0x400010000001026L, active4, 0x121L, active5, 0x8040000000L);
      case 75:
      case 107:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000L, active1, 0x1000L, active2, 0x2000010000020000L, active3, 0x180000000200010L, active4, 0x9ff2002000L, active5, 0x800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000004000000L, active1, 0L, active2, 0x20000000000L, active3, 0x4000000000000L, active4, 0x400000000000000L, active5, 0x600000000L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 56);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 217, 56);
         else if ((active5 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 366, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x300200L, active1, 0x100200000000000L, active2, 0x8000000000000800L, active3, 0L, active4, 0x4000400000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x80400L, active2, 0x300004000L, active3, 0x800028008010000L, active4, 0x9c00L, active5, 0x1000000000000L);
      case 80:
      case 112:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000L, active2, 0x1000000000000000L, active3, 0L, active4, 0x200000000000000L, active5, 0x100000000000L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 56);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 56);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 56);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 56);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 56);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 252, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0xe00000040060000L, active2, 0x3e000000080000L, active3, 0x4040000000000000L, active4, 0x2000000000L, active5, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 56);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 176, 56);
         else if ((active5 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 357, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0L, active3, 0x200000400000L, active4, 0x100000000000008L, active5, 0x2580L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 56);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 56);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 56);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 56);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 56);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 56);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 183, 56);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 203, 56);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 260, 56);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 301, 56);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 320, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2008080008081L, active2, 0x8000L, active3, 0x20000200L, active4, 0x10082L, active5, 0x3ff0008L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20002000L, active2, 0x200004000000002L, active3, 0x204000000L, active4, 0x100004L, active5, 0x30000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L);
      case 88:
      case 120:
         if ((active5 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 332, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x4000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 309, 56);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 317, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000240L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4001800L, active1, 0x10000000000000L, active2, 0x100010000080002L, active3, 0x40080200000210L, active4, 0x4100004000000000L, active5, 0x2000020L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L, active5, 0x1000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 56);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 204, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x8200000002000000L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x74001000L, active5, 0x40000000010L);
      case 68:
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 56);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 56);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 191, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L, active2, 0x400000000000L, active3, 0L, active4, 0L, active5, 0xb0000000000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 56);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 56);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 56);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 56);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 143, 56);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 56);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 56);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 218, 56);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 221, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000040000L, active1, 0L, active2, 0xc020000000400L, active3, 0x800000L, active4, 0x400008000112000L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0x1L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 56);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 56);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 262, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0L);
      case 72:
      case 104:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 190, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x6008000020000L, active2, 0x10000L, active3, 0x4004200000200000L, active4, 0x2004000L, active5, 0x500004000L);
      case 76:
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 56);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 189, 56);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 299, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0x400000L, active4, 0x1000100000cL, active5, 0L);
      case 77:
      case 109:
         if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0x4000L, active4, 0x20800L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 232, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x4400L, active1, 0x4018007aL, active2, 0x20000200000008L, active3, 0x808000000000000L, active4, 0x800000000000520L, active5, 0x240000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L, active2, 0x1000000000000800L, active3, 0xc0004L, active4, 0x200000000000000L, active5, 0x8000008000L);
      case 80:
      case 112:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 185, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x380000000L, active5, 0x400L);
      case 82:
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 56);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 56);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 249, 56);
         else if ((active5 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 356, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x400800000000L, active1, 0x4101L, active2, 0x300000000040L, active3, 0x10400L, active4, 0x248002L, active5, 0x800000000008L);
      case 83:
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 56);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 224, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x500000000000004L, active2, 0x2080000000000L, active3, 0x8400000000000000L, active4, 0xc00000200L, active5, 0x1ff2200L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 56);
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 56);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 56);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 166, 56);
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 293, 56);
         else if ((active5 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 331, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000020200000L, active1, 0x4000000020000000L, active2, 0x40000000000L, active3, 0x180400000000002L, active4, 0x80L, active5, 0x10400c0001c0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x401000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0x800000000L, active4, 0xc0000008000000L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 231, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0xc0000000000000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40020000400L, active1, 0x804000040000001L, active2, 0L, active3, 0x800000000410000L, active4, 0x380000108L, active5, 0x4000580L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L);
      case 67:
      case 99:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 242, 56);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 254, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x101000L, active2, 0x100000000000000L, active3, 0L, active4, 0x400000400L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 294, 56);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 295, 56);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 56);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 56);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 56);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 149, 56);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 56);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 255, 56);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 292, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000200000L, active1, 0x400000000000000L, active2, 0x10040L, active3, 0x400000800000100L, active4, 0x10800028000L, active5, 0x40L);
      case 71:
      case 103:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 56);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 261, 56);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 300, 56);
         else if ((active5 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 350, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400002000000L, active1, 0x4100000000040100L, active2, 0x10020c0000000000L, active3, 0x180000000000022L, active4, 0x9200003L, active5, 0x1b0001ff0008L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 56);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 56);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 225, 56);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 246, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000400000L, active5, 0x40000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100400000002800L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 56);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 56);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 56);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 219, 56);
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 359, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x80000L, active2, 0xc000000000000L, active3, 0x2c0404L, active4, 0x400000002000000L, active5, 0x100004000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0x74000000L, active5, 0x8000000L);
      case 80:
      case 112:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 138, 56);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 313, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0x10000000000L, active3, 0L, active4, 0L, active5, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 56);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 56);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 56);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0x1000000110080L, active5, 0x800000008020L);
      case 83:
      case 115:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 161, 56);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 56);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 353, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x44000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 56);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 56);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 56);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 56);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 233, 56);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 243, 56);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 265, 56);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 279, 56);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 315, 56);
         else if ((active5 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 324, 56);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0x12000000000078L, active2, 0x20000000800L, active3, 0x280000000200L, active4, 0x4L, active5, 0x4400000200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0x400000000000L, active3, 0L, active4, 0x1000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x78L, active2, 0L, active3, 0x4L, active4, 0L, active5, 0x1ff0000L);
      case 65:
      case 97:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0x1000000210400L, active5, 0x844000002000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0x4000000L);
      case 67:
      case 99:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 257, 56);
         else if ((active5 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 363, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000000L, active2, 0xc000000000000L, active3, 0L, active4, 0x1L, active5, 0x4400L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 56);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 296, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 56);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 56);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 56);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 201, 56);
         else if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 235, 56);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 274, 56);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 278, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0x80000L, active2, 0x20000000000L, active3, 0xc0000L, active4, 0x2800L, active5, 0x1000400000000L);
      case 71:
      case 103:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 213, 56);
         else if ((active5 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 352, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000200000L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0x600000000400L, active4, 0x4000000000000084L, active5, 0L);
      case 75:
      case 107:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 56);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 281, 56);
         break;
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 56);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 56);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 251, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x22000000L, active1, 0L, active2, 0L, active3, 0x180000000000000L, active4, 0x70001000L, active5, 0x8180L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0x1000000000000000L, active3, 0L, active4, 0L, active5, 0x30000000008L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4010000000000004L, active2, 0xc0000000000L, active3, 0L, active4, 0x8000000L, active5, 0x100000000000L);
      case 80:
      case 112:
         if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 312, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100L, active4, 0x40000004000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 227, 56);
         else if ((active5 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 347, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L, active2, 0x400000000000L, active3, 0x10000L, active4, 0x800000100L, active5, 0x200L);
      case 83:
      case 115:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 144, 56);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 168, 56);
         else if ((active5 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 325, 56);
         else if ((active5 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 326, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000028000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 56);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 56);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 250, 56);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 314, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x104000000000000L, active2, 0L, active3, 0x400000L, active4, 0x380004008L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x2L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 56);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 276, 56);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400002000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000001000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0x4000000000L);
      case 67:
      case 99:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 238, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 114, 56);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 56);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 177, 56);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 193, 56);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 214, 56);
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 330, 56);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 345, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L, active2, 0x4000000000840L, active3, 0x100000000000000L, active4, 0x400400001000L, active5, 0x8000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 56);
         else if ((active5 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 323, 56);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 360, 56);
         else if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 361, 56);
         break;
      case 72:
      case 104:
         if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x300000000L, active5, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000040000L, active2, 0x8000000000000L, active3, 0L, active4, 0x8L, active5, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200004L, active5, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x440000L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 126, 56);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 56);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 171, 56);
         else if ((active5 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 364, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x5L, active2, 0L, active3, 0x400L, active4, 0x1000000002800L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L);
      case 80:
      case 112:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x70020000L, active5, 0x180L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 56);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 116, 56);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 169, 56);
         else if ((active5 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 354, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40000004000L);
      case 83:
      case 115:
         if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 270, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0x20000L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 56);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 188, 56);
         else if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 266, 56);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 271, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1030L, active2, 0L, active3, 0x100L, active4, 0x4000000000010001L, active5, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x4L, active4, 0x8000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000L, active4, 0x800000000L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x200000L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 56);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 208, 56);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 264, 56);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 282, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800001000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0x40000100080L);
      case 68:
      case 100:
         if ((active5 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 335, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100L);
      case 69:
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 56);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 237, 56);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 272, 56);
         else if ((active5 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 346, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0x800000000L, active5, 0x1224000L);
      case 71:
      case 103:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 202, 56);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x30L, active2, 0L, active3, 0x100L, active4, 0x200004L, active5, 0x40000L);
      case 75:
      case 107:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 304, 56);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x70000000L, active5, 0x4000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0x80000400000000L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L, active4, 0x1000L, active5, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000008L, active5, 0x480000L);
      case 80:
      case 112:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 139, 56);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 310, 56);
         break;
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 56);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 302, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 83:
      case 115:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 178, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40040L, active2, 0L, active3, 0x100000000000004L, active4, 0x8000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 64, 56);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 56);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 267, 56);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 269, 56);
         else if ((active5 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 368, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80L, active5, 0x800000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L);
      case 88:
      case 120:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 134, 56);
         break;
      case 89:
      case 121:
         if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 318, 56);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800001810000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8020000L, active5, 0x20000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80L);
      case 69:
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 120, 56);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 280, 56);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(10, 290, 56);
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 358, 56);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x4L, active4, 0x70000000L, active5, 0x202000L);
      case 71:
      case 103:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 179, 56);
         else if ((active5 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 329, 56);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0x4L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x30L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000L);
      case 78:
      case 110:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 259, 56);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0x440000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40100L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 311, 56);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 206, 56);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 291, 56);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4L, active5, 0L);
      case 84:
      case 116:
         if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 268, 56);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40008L, active2, 0L, active3, 0x100000000000000L, active4, 0x80L, active5, 0x40000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000L);
      case 89:
      case 121:
         if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 340, 56);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, active3, active4, active5, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 68:
      case 100:
         if ((active5 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(11, 327, 56);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 56);
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 256, 56);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 277, 56);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L, active3, 0L, active4, 0x20080L, active5, 0x4000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L, active3, 0L, active4, 0x100000000L, active5, 0x40000000000L);
      case 75:
      case 107:
         if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 341, 56);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x200000000L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 200, 56);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L, active3, 0L, active4, 0x8000000L, active5, 0x20000L);
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 70, 56);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 194, 56);
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(11, 339, 56);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 344, 56);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x802000L);
      case 84:
      case 116:
         if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 258, 56);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x70000000L, active5, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active3, 0x40000L, active4, 0L, active5, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4, active5, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 67:
      case 99:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 82, 56);
         break;
      case 69:
      case 101:
         if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x60000000L, active5, 0L);
      case 70:
      case 102:
         if ((active5 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 328, 56);
         break;
      case 71:
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 66, 56);
         else if ((active5 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 367, 56);
         break;
      case 72:
      case 104:
         if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 342, 56);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 46, 56);
         else if ((active5 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 333, 56);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x24000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x40000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x8000000L, active5, 0L);
      case 82:
      case 114:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 210, 56);
         break;
      case 83:
      case 115:
         if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(12, 263, 56);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 273, 56);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x100000000L, active5, 0x840000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(12, 289, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L, active3, active4, active5, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 337, 56);
         break;
      case 69:
      case 101:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 288, 56);
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 338, 56);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x800000L);
      case 78:
      case 110:
         if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 362, 56);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x40000000L, active5, 0L);
      case 80:
      case 112:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 248, 56);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 84:
      case 116:
         if ((active5 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(13, 334, 56);
         return jjMoveStringLiteralDfa14_0(active1, 0x20L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active3, 0L, active4, 0x20000000L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 283, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L, active3, active4, active5, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x20L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 211, 56);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0L, active5, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x40000000L, active5, 0L);
      case 82:
      case 114:
         if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 343, 56);
         return jjMoveStringLiteralDfa15_0(active1, 0L, active3, 0L, active4, 0x20000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L, active3, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L, old3, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L, 0L, active4, active5, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0L, active5, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x20000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active4, 0x40000000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active1, 0x20L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L, 0L, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L, 0L, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L, 0L, active4, active5, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0L, active5, 0x10000L);
      case 80:
      case 112:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(16, 69, 56);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active4, 0x20000000L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(16, 286, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L, 0L, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old4, long active4, long old5, long active5)
{
   if (((active1 &= old1) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L, 0L, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, active5, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(17, 285, 56);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active5, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, active5, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4, old5, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, 0L, active5, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active5 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(18, 336, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, 0L, active5, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffffffffffffcL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0xfffffffffffc0000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAdd(10);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 381)
                        kind = 381;
                     jjCheckNAddStates(5, 8);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 35)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddStates(13, 16);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(17, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  else if (curChar == 39)
                     jjCheckNAddStates(17, 19);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  else if (curChar == 46)
                     jjAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 376)
                     kind = 376;
                  jjCheckNAdd(1);
                  break;
               case 3:
               case 4:
                  if (curChar == 39)
                     jjCheckNAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if (curChar == 39 && kind > 378)
                     kind = 378;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 382)
                     kind = 382;
                  break;
               case 13:
                  if (curChar != 35)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddStates(13, 16);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 46)
                     jjAddStates(0, 2);
                  break;
               case 16:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 18:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(20, 22);
                  break;
               case 20:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if (curChar == 42 && kind > 369)
                     kind = 369;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 46)
                     jjAddStates(3, 4);
                  break;
               case 26:
                  if (curChar != 35)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 28:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 29:
                  if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  break;
               case 30:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 32:
                  if (curChar != 34)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAdd(25);
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  break;
               case 34:
                  if (curChar == 34)
                     jjCheckNAddStates(26, 28);
                  break;
               case 35:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 37:
                  if (curChar == 34)
                     jjCheckNAddStates(29, 31);
                  break;
               case 38:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 381)
                     kind = 381;
                  jjCheckNAddStates(5, 8);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 0);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 377)
                     kind = 377;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 381)
                     kind = 381;
                  jjCheckNAdd(55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 42:
                  if ((0x10001400100014L & l) != 0L)
                  {
                     if (kind > 375)
                        kind = 375;
                  }
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 2:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddStates(13, 16);
                  }
                  else if (curChar == 123)
                     jjAddStates(32, 35);
                  if ((0x402000004020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if ((0x100000001000000L & l) != 0L)
                  {
                     if (kind > 382)
                        kind = 382;
                     jjstateSet[jjnewStateCnt++] = 9;
                  }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 6:
                  jjAddStates(17, 19);
                  break;
               case 8:
                  if ((0x100000001000000L & l) == 0L)
                     break;
                  if (kind > 382)
                     kind = 382;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 13:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddStates(13, 16);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 21:
                  jjCheckNAddStates(20, 22);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 31:
                  jjCheckNAddStates(23, 25);
                  break;
               case 36:
                  jjCheckNAddStates(26, 28);
                  break;
               case 39:
                  jjCheckNAddStates(29, 31);
                  break;
               case 40:
                  if (curChar == 123)
                     jjAddStates(32, 35);
                  break;
               case 41:
                  if ((0x400000004000L & l) != 0L && kind > 373)
                     kind = 373;
                  break;
               case 43:
                  if ((0x40000000400L & l) != 0L && kind > 374)
                     kind = 374;
                  break;
               case 44:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x10001400100014L & l) != 0L && kind > 375)
                     kind = 375;
                  break;
               case 46:
                  if ((0x8000000080000L & l) != 0L && kind > 375)
                     kind = 375;
                  break;
               case 47:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(14, 15);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddStates(13, 16);
                  break;
               case 57:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(14, 15);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(14, 15);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 370)
                        kind = 370;
                     jjCheckNAddTwoStates(24, 25);
                  }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(17, 19);
                  break;
               case 14:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(20, 22);
                  break;
               case 24:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
               case 27:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 370)
                     kind = 370;
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(23, 25);
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(26, 28);
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(29, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 47:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   16, 18, 23, 26, 28, 49, 0, 50, 55, 35, 36, 38, 39, 14, 24, 25, 
   15, 5, 6, 7, 20, 21, 22, 30, 31, 32, 35, 36, 22, 38, 39, 32, 
   42, 44, 45, 47, 10, 12, 53, 54, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\54", "\56", "\50", "\51", "\173", 
"\175", "\133", "\135", "\75", "\74\76", "\41\75", "\74", "\74\75", "\76", "\76\75", 
"\52", "\57", "\53", "\55", "\77", "\44", "\73", "\72", "\174\174", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x67e7ffffffffffffL, 0xffffffL, 
};
static final long[] jjtoSkip = {
   0x9eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x80L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x160L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[56];
private final int[] jjstateSet = new int[112];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public TeiidSyntaxParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TeiidSyntaxParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestingDepth -= 1;
                SwitchTo(commentNestingDepth == 0 ? DEFAULT : IN_MULTI_LINE_COMMENT);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                commentNestingDepth = 1;
         break;
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                commentNestingDepth += 1;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
