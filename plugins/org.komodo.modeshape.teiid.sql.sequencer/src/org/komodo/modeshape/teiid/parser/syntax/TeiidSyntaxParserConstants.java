/* Generated By:JJTree&JavaCC: Do not edit this line. TeiidSyntaxParserConstants.java */
/*
* JBoss, Home of Professional Open Source.
* See the COPYRIGHT.txt file distributed with this work for information
* regarding copyright ownership. Some portions may be licensed
* to Red Hat, Inc. under one or more contributor license agreements.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
* 02110-1301 USA.
*/
package org.komodo.modeshape.teiid.parser.syntax;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TeiidSyntaxParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int VARBINARY = 10;
  /** RegularExpression Id. */
  int VARCHAR = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int BYTE = 13;
  /** RegularExpression Id. */
  int TINYINT = 14;
  /** RegularExpression Id. */
  int SHORT = 15;
  /** RegularExpression Id. */
  int SMALLINT = 16;
  /** RegularExpression Id. */
  int CHAR = 17;
  /** RegularExpression Id. */
  int INTEGER = 18;
  /** RegularExpression Id. */
  int LONG = 19;
  /** RegularExpression Id. */
  int BIGINT = 20;
  /** RegularExpression Id. */
  int BIGINTEGER = 21;
  /** RegularExpression Id. */
  int FLOAT = 22;
  /** RegularExpression Id. */
  int REAL = 23;
  /** RegularExpression Id. */
  int DOUBLE = 24;
  /** RegularExpression Id. */
  int BIGDECIMAL = 25;
  /** RegularExpression Id. */
  int DECIMAL = 26;
  /** RegularExpression Id. */
  int DATE = 27;
  /** RegularExpression Id. */
  int TIME = 28;
  /** RegularExpression Id. */
  int TIMESTAMP = 29;
  /** RegularExpression Id. */
  int OBJECT = 30;
  /** RegularExpression Id. */
  int BLOB = 31;
  /** RegularExpression Id. */
  int CLOB = 32;
  /** RegularExpression Id. */
  int XML = 33;
  /** RegularExpression Id. */
  int CAST = 34;
  /** RegularExpression Id. */
  int CONVERT = 35;
  /** RegularExpression Id. */
  int ADD = 36;
  /** RegularExpression Id. */
  int ALL = 37;
  /** RegularExpression Id. */
  int ALTER = 38;
  /** RegularExpression Id. */
  int AND = 39;
  /** RegularExpression Id. */
  int ANY = 40;
  /** RegularExpression Id. */
  int ARRAY = 41;
  /** RegularExpression Id. */
  int ARRAY_AGG = 42;
  /** RegularExpression Id. */
  int AS = 43;
  /** RegularExpression Id. */
  int ASC = 44;
  /** RegularExpression Id. */
  int ATOMIC = 45;
  /** RegularExpression Id. */
  int AUTORIZATION = 46;
  /** RegularExpression Id. */
  int BEGIN = 47;
  /** RegularExpression Id. */
  int BETWEEN = 48;
  /** RegularExpression Id. */
  int BINARY = 49;
  /** RegularExpression Id. */
  int BOTH = 50;
  /** RegularExpression Id. */
  int BREAK = 51;
  /** RegularExpression Id. */
  int BY = 52;
  /** RegularExpression Id. */
  int CALL = 53;
  /** RegularExpression Id. */
  int CALLED = 54;
  /** RegularExpression Id. */
  int CASCADED = 55;
  /** RegularExpression Id. */
  int CASE = 56;
  /** RegularExpression Id. */
  int CHARACTER = 57;
  /** RegularExpression Id. */
  int CHECK = 58;
  /** RegularExpression Id. */
  int CLOSE = 59;
  /** RegularExpression Id. */
  int COLLATE = 60;
  /** RegularExpression Id. */
  int COLUMN = 61;
  /** RegularExpression Id. */
  int COMMIT = 62;
  /** RegularExpression Id. */
  int CONNECT = 63;
  /** RegularExpression Id. */
  int CONSTRAINT = 64;
  /** RegularExpression Id. */
  int CONTINUE = 65;
  /** RegularExpression Id. */
  int CORRESPONDING = 66;
  /** RegularExpression Id. */
  int CURRENT_DATE = 67;
  /** RegularExpression Id. */
  int CURRENT_TIME = 68;
  /** RegularExpression Id. */
  int CURRENT_TIMESTAMP = 69;
  /** RegularExpression Id. */
  int CURRENT_USER = 70;
  /** RegularExpression Id. */
  int CREATE = 71;
  /** RegularExpression Id. */
  int CRITERIA = 72;
  /** RegularExpression Id. */
  int CROSS = 73;
  /** RegularExpression Id. */
  int CURSOR = 74;
  /** RegularExpression Id. */
  int DAY = 75;
  /** RegularExpression Id. */
  int DEALLOCATE = 76;
  /** RegularExpression Id. */
  int DEFAULT_KEYWORD = 77;
  /** RegularExpression Id. */
  int DECLARE = 78;
  /** RegularExpression Id. */
  int DELETE = 79;
  /** RegularExpression Id. */
  int DESC = 80;
  /** RegularExpression Id. */
  int DESCRIBE = 81;
  /** RegularExpression Id. */
  int DETERMINISTIC = 82;
  /** RegularExpression Id. */
  int DISCONNECT = 83;
  /** RegularExpression Id. */
  int DISTINCT = 84;
  /** RegularExpression Id. */
  int DROP = 85;
  /** RegularExpression Id. */
  int EACH = 86;
  /** RegularExpression Id. */
  int ELSE = 87;
  /** RegularExpression Id. */
  int END = 88;
  /** RegularExpression Id. */
  int ERROR = 89;
  /** RegularExpression Id. */
  int ESCAPE = 90;
  /** RegularExpression Id. */
  int EXCEPT = 91;
  /** RegularExpression Id. */
  int EXEC = 92;
  /** RegularExpression Id. */
  int EXECUTE = 93;
  /** RegularExpression Id. */
  int EXTERNAL = 94;
  /** RegularExpression Id. */
  int EXISTS = 95;
  /** RegularExpression Id. */
  int FALSE = 96;
  /** RegularExpression Id. */
  int FETCH = 97;
  /** RegularExpression Id. */
  int FILTER = 98;
  /** RegularExpression Id. */
  int FOR = 99;
  /** RegularExpression Id. */
  int FOREIGN = 100;
  /** RegularExpression Id. */
  int FROM = 101;
  /** RegularExpression Id. */
  int FULL = 102;
  /** RegularExpression Id. */
  int FUNCTION = 103;
  /** RegularExpression Id. */
  int GET = 104;
  /** RegularExpression Id. */
  int GLOBAL = 105;
  /** RegularExpression Id. */
  int GRANT = 106;
  /** RegularExpression Id. */
  int GROUP = 107;
  /** RegularExpression Id. */
  int HAS = 108;
  /** RegularExpression Id. */
  int HAVING = 109;
  /** RegularExpression Id. */
  int HOLD = 110;
  /** RegularExpression Id. */
  int HOUR = 111;
  /** RegularExpression Id. */
  int IF = 112;
  /** RegularExpression Id. */
  int IDENTITY = 113;
  /** RegularExpression Id. */
  int IMMEDIATE = 114;
  /** RegularExpression Id. */
  int IN = 115;
  /** RegularExpression Id. */
  int INDICATOR = 116;
  /** RegularExpression Id. */
  int INNER = 117;
  /** RegularExpression Id. */
  int INPUT = 118;
  /** RegularExpression Id. */
  int INOUT = 119;
  /** RegularExpression Id. */
  int INSENSITIVE = 120;
  /** RegularExpression Id. */
  int INSERT = 121;
  /** RegularExpression Id. */
  int INTERSECT = 122;
  /** RegularExpression Id. */
  int INTERVAL = 123;
  /** RegularExpression Id. */
  int INTO = 124;
  /** RegularExpression Id. */
  int IS = 125;
  /** RegularExpression Id. */
  int ISOLATION = 126;
  /** RegularExpression Id. */
  int JOIN = 127;
  /** RegularExpression Id. */
  int LEFT = 128;
  /** RegularExpression Id. */
  int LANGUAGE = 129;
  /** RegularExpression Id. */
  int LARGE = 130;
  /** RegularExpression Id. */
  int LEADING = 131;
  /** RegularExpression Id. */
  int LEAVE = 132;
  /** RegularExpression Id. */
  int LIKE = 133;
  /** RegularExpression Id. */
  int LIKE_REGEX = 134;
  /** RegularExpression Id. */
  int LIMIT = 135;
  /** RegularExpression Id. */
  int LOCAL = 136;
  /** RegularExpression Id. */
  int LOOP = 137;
  /** RegularExpression Id. */
  int MAKEDEP = 138;
  /** RegularExpression Id. */
  int MAKENOTDEP = 139;
  /** RegularExpression Id. */
  int MATCH = 140;
  /** RegularExpression Id. */
  int MERGE = 141;
  /** RegularExpression Id. */
  int METHOD = 142;
  /** RegularExpression Id. */
  int MINUTE = 143;
  /** RegularExpression Id. */
  int MODIFIES = 144;
  /** RegularExpression Id. */
  int MODULE = 145;
  /** RegularExpression Id. */
  int MONTH = 146;
  /** RegularExpression Id. */
  int NATURAL = 147;
  /** RegularExpression Id. */
  int NEW = 148;
  /** RegularExpression Id. */
  int NOCACHE = 149;
  /** RegularExpression Id. */
  int NO = 150;
  /** RegularExpression Id. */
  int NONE = 151;
  /** RegularExpression Id. */
  int NOT = 152;
  /** RegularExpression Id. */
  int NULL = 153;
  /** RegularExpression Id. */
  int OF = 154;
  /** RegularExpression Id. */
  int OFFSET = 155;
  /** RegularExpression Id. */
  int OLD = 156;
  /** RegularExpression Id. */
  int ON = 157;
  /** RegularExpression Id. */
  int ONLY = 158;
  /** RegularExpression Id. */
  int OPEN = 159;
  /** RegularExpression Id. */
  int OPTION = 160;
  /** RegularExpression Id. */
  int OPTIONS = 161;
  /** RegularExpression Id. */
  int OR = 162;
  /** RegularExpression Id. */
  int ORDER = 163;
  /** RegularExpression Id. */
  int OUT = 164;
  /** RegularExpression Id. */
  int OUTER = 165;
  /** RegularExpression Id. */
  int OUTPUT = 166;
  /** RegularExpression Id. */
  int OVER = 167;
  /** RegularExpression Id. */
  int OVERLAPS = 168;
  /** RegularExpression Id. */
  int PARAMETER = 169;
  /** RegularExpression Id. */
  int PARTITION = 170;
  /** RegularExpression Id. */
  int PRECISION = 171;
  /** RegularExpression Id. */
  int PREPARE = 172;
  /** RegularExpression Id. */
  int PRIMARY = 173;
  /** RegularExpression Id. */
  int PROCEDURE = 174;
  /** RegularExpression Id. */
  int RANGE = 175;
  /** RegularExpression Id. */
  int READS = 176;
  /** RegularExpression Id. */
  int RECURSIVE = 177;
  /** RegularExpression Id. */
  int REFERENCES = 178;
  /** RegularExpression Id. */
  int REFERENCING = 179;
  /** RegularExpression Id. */
  int RETURN = 180;
  /** RegularExpression Id. */
  int RETURNS = 181;
  /** RegularExpression Id. */
  int REVOKE = 182;
  /** RegularExpression Id. */
  int RIGHT = 183;
  /** RegularExpression Id. */
  int ROLLBACK = 184;
  /** RegularExpression Id. */
  int ROLLUP = 185;
  /** RegularExpression Id. */
  int ROW = 186;
  /** RegularExpression Id. */
  int ROWS = 187;
  /** RegularExpression Id. */
  int SAVEPOINT = 188;
  /** RegularExpression Id. */
  int SCROLL = 189;
  /** RegularExpression Id. */
  int SEARCH = 190;
  /** RegularExpression Id. */
  int SECOND = 191;
  /** RegularExpression Id. */
  int SELECT = 192;
  /** RegularExpression Id. */
  int SENSITIVE = 193;
  /** RegularExpression Id. */
  int SESSION_USER = 194;
  /** RegularExpression Id. */
  int SET = 195;
  /** RegularExpression Id. */
  int SIMILAR = 196;
  /** RegularExpression Id. */
  int SPECIFIC = 197;
  /** RegularExpression Id. */
  int SOME = 198;
  /** RegularExpression Id. */
  int SQL = 199;
  /** RegularExpression Id. */
  int SQLEXCEPTION = 200;
  /** RegularExpression Id. */
  int SQLSTATE = 201;
  /** RegularExpression Id. */
  int SQLWARNING = 202;
  /** RegularExpression Id. */
  int START = 203;
  /** RegularExpression Id. */
  int STATIC = 204;
  /** RegularExpression Id. */
  int SYSTEM = 205;
  /** RegularExpression Id. */
  int SYSTEM_USER = 206;
  /** RegularExpression Id. */
  int TABLE = 207;
  /** RegularExpression Id. */
  int TEMPORARY = 208;
  /** RegularExpression Id. */
  int THEN = 209;
  /** RegularExpression Id. */
  int TIMEZONE_HOUR = 210;
  /** RegularExpression Id. */
  int TIMEZONE_MINUTE = 211;
  /** RegularExpression Id. */
  int TO = 212;
  /** RegularExpression Id. */
  int TRAILING = 213;
  /** RegularExpression Id. */
  int TRANSLATE = 214;
  /** RegularExpression Id. */
  int TRIGGER = 215;
  /** RegularExpression Id. */
  int TRUE = 216;
  /** RegularExpression Id. */
  int UNION = 217;
  /** RegularExpression Id. */
  int UNIQUE = 218;
  /** RegularExpression Id. */
  int UNKNOWN = 219;
  /** RegularExpression Id. */
  int USER = 220;
  /** RegularExpression Id. */
  int UPDATE = 221;
  /** RegularExpression Id. */
  int USING = 222;
  /** RegularExpression Id. */
  int VALUE = 223;
  /** RegularExpression Id. */
  int VALUES = 224;
  /** RegularExpression Id. */
  int VIRTUAL = 225;
  /** RegularExpression Id. */
  int WHEN = 226;
  /** RegularExpression Id. */
  int WHENEVER = 227;
  /** RegularExpression Id. */
  int WHERE = 228;
  /** RegularExpression Id. */
  int WITH = 229;
  /** RegularExpression Id. */
  int WHILE = 230;
  /** RegularExpression Id. */
  int WINDOW = 231;
  /** RegularExpression Id. */
  int WITHIN = 232;
  /** RegularExpression Id. */
  int WITHOUT = 233;
  /** RegularExpression Id. */
  int YEAR = 234;
  /** RegularExpression Id. */
  int ALLOCATE = 235;
  /** RegularExpression Id. */
  int ARE = 236;
  /** RegularExpression Id. */
  int ASENSITIVE = 237;
  /** RegularExpression Id. */
  int ASYMETRIC = 238;
  /** RegularExpression Id. */
  int CYCLE = 239;
  /** RegularExpression Id. */
  int DEC = 240;
  /** RegularExpression Id. */
  int DEREF = 241;
  /** RegularExpression Id. */
  int DYNAMIC = 242;
  /** RegularExpression Id. */
  int ELEMENT = 243;
  /** RegularExpression Id. */
  int FREE = 244;
  /** RegularExpression Id. */
  int INT = 245;
  /** RegularExpression Id. */
  int LATERAL = 246;
  /** RegularExpression Id. */
  int LOCALTIME = 247;
  /** RegularExpression Id. */
  int LOCALTIMESTAMP = 248;
  /** RegularExpression Id. */
  int MEMBER = 249;
  /** RegularExpression Id. */
  int MULTISET = 250;
  /** RegularExpression Id. */
  int NATIONAL = 251;
  /** RegularExpression Id. */
  int NCHAR = 252;
  /** RegularExpression Id. */
  int NCLOB = 253;
  /** RegularExpression Id. */
  int NUMERIC = 254;
  /** RegularExpression Id. */
  int RELEASE = 255;
  /** RegularExpression Id. */
  int SPECIFICTYPE = 256;
  /** RegularExpression Id. */
  int SYMETRIC = 257;
  /** RegularExpression Id. */
  int SUBMULTILIST = 258;
  /** RegularExpression Id. */
  int TRANSLATION = 259;
  /** RegularExpression Id. */
  int TREAT = 260;
  /** RegularExpression Id. */
  int VARYING = 261;
  /** RegularExpression Id. */
  int XMLAGG = 262;
  /** RegularExpression Id. */
  int XMLATTRIBUTES = 263;
  /** RegularExpression Id. */
  int XMLBINARY = 264;
  /** RegularExpression Id. */
  int XMLCAST = 265;
  /** RegularExpression Id. */
  int XMLCONCAT = 266;
  /** RegularExpression Id. */
  int XMLCOMMENT = 267;
  /** RegularExpression Id. */
  int XMLDOCUMENT = 268;
  /** RegularExpression Id. */
  int XMLELEMENT = 269;
  /** RegularExpression Id. */
  int XMLEXISTS = 270;
  /** RegularExpression Id. */
  int XMLFOREST = 271;
  /** RegularExpression Id. */
  int XMLITERATE = 272;
  /** RegularExpression Id. */
  int XMLNAMESPACES = 273;
  /** RegularExpression Id. */
  int XMLPARSE = 274;
  /** RegularExpression Id. */
  int XMLPI = 275;
  /** RegularExpression Id. */
  int XMLQUERY = 276;
  /** RegularExpression Id. */
  int XMLSERIALIZE = 277;
  /** RegularExpression Id. */
  int XMLTABLE = 278;
  /** RegularExpression Id. */
  int XMLTEXT = 279;
  /** RegularExpression Id. */
  int XMLVALIDATE = 280;
  /** RegularExpression Id. */
  int DATALINK = 281;
  /** RegularExpression Id. */
  int DLNEWCOPY = 282;
  /** RegularExpression Id. */
  int DLPREVIOUSCOPY = 283;
  /** RegularExpression Id. */
  int DLURLCOMPLETE = 284;
  /** RegularExpression Id. */
  int DLURLCOMPLETEWRITE = 285;
  /** RegularExpression Id. */
  int DLURLCOMPLETEONLY = 286;
  /** RegularExpression Id. */
  int DLURLPATH = 287;
  /** RegularExpression Id. */
  int DLURLPATHWRITE = 288;
  /** RegularExpression Id. */
  int DLURLPATHONLY = 289;
  /** RegularExpression Id. */
  int DLURLSCHEME = 290;
  /** RegularExpression Id. */
  int DLURLSERVER = 291;
  /** RegularExpression Id. */
  int DLVALUE = 292;
  /** RegularExpression Id. */
  int IMPORT = 293;
  /** RegularExpression Id. */
  int INSTEAD = 294;
  /** RegularExpression Id. */
  int ENABLED = 295;
  /** RegularExpression Id. */
  int DISABLED = 296;
  /** RegularExpression Id. */
  int VIEW = 297;
  /** RegularExpression Id. */
  int KEY = 298;
  /** RegularExpression Id. */
  int SERIAL = 299;
  /** RegularExpression Id. */
  int TEXTAGG = 300;
  /** RegularExpression Id. */
  int COUNT = 301;
  /** RegularExpression Id. */
  int ROW_NUMBER = 302;
  /** RegularExpression Id. */
  int RANK = 303;
  /** RegularExpression Id. */
  int DENSE_RANK = 304;
  /** RegularExpression Id. */
  int SUM = 305;
  /** RegularExpression Id. */
  int AVG = 306;
  /** RegularExpression Id. */
  int MIN = 307;
  /** RegularExpression Id. */
  int MAX = 308;
  /** RegularExpression Id. */
  int EVERY = 309;
  /** RegularExpression Id. */
  int STDDEV_POP = 310;
  /** RegularExpression Id. */
  int STDDEV_SAMP = 311;
  /** RegularExpression Id. */
  int VAR_SAMP = 312;
  /** RegularExpression Id. */
  int VAR_POP = 313;
  /** RegularExpression Id. */
  int DOCUMENT = 314;
  /** RegularExpression Id. */
  int CONTENT = 315;
  /** RegularExpression Id. */
  int TRIM = 316;
  /** RegularExpression Id. */
  int EMPTY = 317;
  /** RegularExpression Id. */
  int ORDINALITY = 318;
  /** RegularExpression Id. */
  int PATH = 319;
  /** RegularExpression Id. */
  int FIRST = 320;
  /** RegularExpression Id. */
  int LAST = 321;
  /** RegularExpression Id. */
  int NEXT = 322;
  /** RegularExpression Id. */
  int SUBSTRING = 323;
  /** RegularExpression Id. */
  int EXTRACT = 324;
  /** RegularExpression Id. */
  int TO_CHARS = 325;
  /** RegularExpression Id. */
  int TO_BYTES = 326;
  /** RegularExpression Id. */
  int TIMESTAMPADD = 327;
  /** RegularExpression Id. */
  int TIMESTAMPDIFF = 328;
  /** RegularExpression Id. */
  int QUERYSTRING = 329;
  /** RegularExpression Id. */
  int NAMESPACE = 330;
  /** RegularExpression Id. */
  int RESULT = 331;
  /** RegularExpression Id. */
  int INDEX = 332;
  /** RegularExpression Id. */
  int ACCESSPATTERN = 333;
  /** RegularExpression Id. */
  int AUTO_INCREMENT = 334;
  /** RegularExpression Id. */
  int WELLFORMED = 335;
  /** RegularExpression Id. */
  int SQL_TSI_FRAC_SECOND = 336;
  /** RegularExpression Id. */
  int SQL_TSI_SECOND = 337;
  /** RegularExpression Id. */
  int SQL_TSI_MINUTE = 338;
  /** RegularExpression Id. */
  int SQL_TSI_HOUR = 339;
  /** RegularExpression Id. */
  int SQL_TSI_DAY = 340;
  /** RegularExpression Id. */
  int SQL_TSI_WEEK = 341;
  /** RegularExpression Id. */
  int SQL_TSI_MONTH = 342;
  /** RegularExpression Id. */
  int SQL_TSI_QUARTER = 343;
  /** RegularExpression Id. */
  int SQL_TSI_YEAR = 344;
  /** RegularExpression Id. */
  int TEXTTABLE = 345;
  /** RegularExpression Id. */
  int ARRAYTABLE = 346;
  /** RegularExpression Id. */
  int SELECTOR = 347;
  /** RegularExpression Id. */
  int SKIP_KEYWORD = 348;
  /** RegularExpression Id. */
  int WIDTH = 349;
  /** RegularExpression Id. */
  int PASSING = 350;
  /** RegularExpression Id. */
  int NAME = 351;
  /** RegularExpression Id. */
  int ENCODING = 352;
  /** RegularExpression Id. */
  int COLUMNS = 353;
  /** RegularExpression Id. */
  int DELIMITER = 354;
  /** RegularExpression Id. */
  int QUOTE = 355;
  /** RegularExpression Id. */
  int HEADER = 356;
  /** RegularExpression Id. */
  int NULLS = 357;
  /** RegularExpression Id. */
  int OBJECTTABLE = 358;
  /** RegularExpression Id. */
  int VERSION = 359;
  /** RegularExpression Id. */
  int INCLUDING = 360;
  /** RegularExpression Id. */
  int EXCLUDING = 361;
  /** RegularExpression Id. */
  int XMLDECLARATION = 362;
  /** RegularExpression Id. */
  int VARIADIC = 363;
  /** RegularExpression Id. */
  int EXCEPTION = 364;
  /** RegularExpression Id. */
  int RAISE = 365;
  /** RegularExpression Id. */
  int CHAIN = 366;
  /** RegularExpression Id. */
  int JSONARRAY_AGG = 367;
  /** RegularExpression Id. */
  int JSONOBJECT = 368;
  /** RegularExpression Id. */
  int ALL_IN_GROUP = 369;
  /** RegularExpression Id. */
  int ID = 370;
  /** RegularExpression Id. */
  int QUOTED_ID = 371;
  /** RegularExpression Id. */
  int ID_PART = 372;
  /** RegularExpression Id. */
  int ESCAPEDFUNCTION = 373;
  /** RegularExpression Id. */
  int ESCAPEDJOIN = 374;
  /** RegularExpression Id. */
  int ESCAPEDTYPE = 375;
  /** RegularExpression Id. */
  int DECIMALVAL = 376;
  /** RegularExpression Id. */
  int FLOATVAL = 377;
  /** RegularExpression Id. */
  int STRINGVAL = 378;
  /** RegularExpression Id. */
  int LETTER = 379;
  /** RegularExpression Id. */
  int DIGIT = 380;
  /** RegularExpression Id. */
  int UNSIGNEDINTEGER = 381;
  /** RegularExpression Id. */
  int BINARYSTRINGVAL = 382;
  /** RegularExpression Id. */
  int HEXIT = 383;
  /** RegularExpression Id. */
  int COMMA = 384;
  /** RegularExpression Id. */
  int PERIOD = 385;
  /** RegularExpression Id. */
  int LPAREN = 386;
  /** RegularExpression Id. */
  int RPAREN = 387;
  /** RegularExpression Id. */
  int LBRACE = 388;
  /** RegularExpression Id. */
  int RBRACE = 389;
  /** RegularExpression Id. */
  int LSBRACE = 390;
  /** RegularExpression Id. */
  int RSBRACE = 391;
  /** RegularExpression Id. */
  int EQ = 392;
  /** RegularExpression Id. */
  int NE = 393;
  /** RegularExpression Id. */
  int NE2 = 394;
  /** RegularExpression Id. */
  int LT = 395;
  /** RegularExpression Id. */
  int LE = 396;
  /** RegularExpression Id. */
  int GT = 397;
  /** RegularExpression Id. */
  int GE = 398;
  /** RegularExpression Id. */
  int STAR = 399;
  /** RegularExpression Id. */
  int SLASH = 400;
  /** RegularExpression Id. */
  int PLUS = 401;
  /** RegularExpression Id. */
  int MINUS = 402;
  /** RegularExpression Id. */
  int QMARK = 403;
  /** RegularExpression Id. */
  int DOLLAR = 404;
  /** RegularExpression Id. */
  int SEMICOLON = 405;
  /** RegularExpression Id. */
  int COLON = 406;
  /** RegularExpression Id. */
  int CONCAT_OP = 407;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"/*\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"string\"",
    "\"varbinary\"",
    "\"varchar\"",
    "\"boolean\"",
    "\"byte\"",
    "\"tinyint\"",
    "\"short\"",
    "\"smallint\"",
    "\"char\"",
    "\"integer\"",
    "\"long\"",
    "\"bigint\"",
    "\"biginteger\"",
    "\"float\"",
    "\"real\"",
    "\"double\"",
    "\"bigdecimal\"",
    "\"decimal\"",
    "\"date\"",
    "\"time\"",
    "\"timestamp\"",
    "\"object\"",
    "\"blob\"",
    "\"clob\"",
    "\"xml\"",
    "\"cast\"",
    "\"convert\"",
    "\"add\"",
    "\"all\"",
    "\"alter\"",
    "\"and\"",
    "\"any\"",
    "\"array\"",
    "\"array_agg\"",
    "\"as\"",
    "\"asc\"",
    "\"atomic\"",
    "\"authorization\"",
    "\"begin\"",
    "\"between\"",
    "\"binary\"",
    "\"both\"",
    "\"break\"",
    "\"by\"",
    "\"call\"",
    "\"called\"",
    "\"cascaded\"",
    "\"case\"",
    "\"character\"",
    "\"check\"",
    "\"close\"",
    "\"collate\"",
    "\"column\"",
    "\"commit\"",
    "\"connect\"",
    "\"constraint\"",
    "\"continue\"",
    "\"corresponding\"",
    "\"current_date\"",
    "\"current_time\"",
    "\"current_timestamp\"",
    "\"current_user\"",
    "\"create\"",
    "\"criteria\"",
    "\"cross\"",
    "\"cursor\"",
    "\"day\"",
    "\"deallocate\"",
    "\"default\"",
    "\"declare\"",
    "\"delete\"",
    "\"desc\"",
    "\"describe\"",
    "\"deterministic\"",
    "\"disconnect\"",
    "\"distinct\"",
    "\"drop\"",
    "\"each\"",
    "\"else\"",
    "\"end\"",
    "\"error\"",
    "\"escape\"",
    "\"except\"",
    "\"exec\"",
    "\"execute\"",
    "\"external\"",
    "\"exists\"",
    "\"false\"",
    "\"fetch\"",
    "\"filter\"",
    "\"for\"",
    "\"foreign\"",
    "\"from\"",
    "\"full\"",
    "\"function\"",
    "\"get\"",
    "\"global\"",
    "\"grant\"",
    "\"group\"",
    "\"has\"",
    "\"having\"",
    "\"hold\"",
    "\"hour\"",
    "\"if\"",
    "\"identity\"",
    "\"immediate\"",
    "\"in\"",
    "\"indicator\"",
    "\"inner\"",
    "\"input\"",
    "\"inout\"",
    "\"insensitive\"",
    "\"insert\"",
    "\"intersect\"",
    "\"interval\"",
    "\"into\"",
    "\"is\"",
    "\"isolation\"",
    "\"join\"",
    "\"left\"",
    "\"language\"",
    "\"large\"",
    "\"leading\"",
    "\"leave\"",
    "\"like\"",
    "\"like_regex\"",
    "\"limit\"",
    "\"local\"",
    "\"loop\"",
    "\"makedep\"",
    "\"makenotdep\"",
    "\"match\"",
    "\"merge\"",
    "\"method\"",
    "\"minute\"",
    "\"modifies\"",
    "\"module\"",
    "\"month\"",
    "\"natural\"",
    "\"new\"",
    "\"nocache\"",
    "\"no\"",
    "\"none\"",
    "\"not\"",
    "\"null\"",
    "\"of\"",
    "\"offset\"",
    "\"old\"",
    "\"on\"",
    "\"only\"",
    "\"open\"",
    "\"option\"",
    "\"options\"",
    "\"or\"",
    "\"order\"",
    "\"out\"",
    "\"outer\"",
    "\"output\"",
    "\"over\"",
    "\"OVERLAPS\"",
    "\"parameter\"",
    "\"partition\"",
    "\"precision\"",
    "\"prepare\"",
    "\"primary\"",
    "\"procedure\"",
    "\"range\"",
    "\"reads\"",
    "\"recursive\"",
    "\"REFERENCES\"",
    "\"REFERENCING\"",
    "\"return\"",
    "\"returns\"",
    "\"REVOKE\"",
    "\"right\"",
    "\"ROLLBACK\"",
    "\"ROLLUP\"",
    "\"row\"",
    "\"rows\"",
    "\"savepoint\"",
    "\"scroll\"",
    "\"search\"",
    "\"second\"",
    "\"select\"",
    "\"sensitive\"",
    "\"session_user\"",
    "\"set\"",
    "\"similar\"",
    "\"specific\"",
    "\"some\"",
    "\"sql\"",
    "\"sqlexception\"",
    "\"sqlstate\"",
    "\"sqlwarning\"",
    "\"start\"",
    "\"static\"",
    "\"system\"",
    "\"system_user\"",
    "\"table\"",
    "\"temporary\"",
    "\"then\"",
    "\"timezone_hour\"",
    "\"timezone_minute\"",
    "\"to\"",
    "\"trailing\"",
    "\"translate\"",
    "\"trigger\"",
    "\"true\"",
    "\"union\"",
    "\"unique\"",
    "\"unknown\"",
    "\"user\"",
    "\"update\"",
    "\"using\"",
    "\"value\"",
    "\"values\"",
    "\"virtual\"",
    "\"when\"",
    "\"whenever\"",
    "\"where\"",
    "\"with\"",
    "\"while\"",
    "\"window\"",
    "\"within\"",
    "\"without\"",
    "\"year\"",
    "\"allocate\"",
    "\"are\"",
    "\"asensitive\"",
    "\"asymetric\"",
    "\"cycle\"",
    "\"dec\"",
    "\"deref\"",
    "\"dynamic\"",
    "\"element\"",
    "\"free\"",
    "\"int\"",
    "\"lateral\"",
    "\"localtime\"",
    "\"localtimestamp\"",
    "\"member\"",
    "\"multiset\"",
    "\"national\"",
    "\"nchar\"",
    "\"nclob\"",
    "\"numeric\"",
    "\"release\"",
    "\"specifictype\"",
    "\"symetric\"",
    "\"submultilist\"",
    "\"translation\"",
    "\"treat\"",
    "\"varying\"",
    "\"xmlagg\"",
    "\"xmlattributes\"",
    "\"xmlbinary\"",
    "\"xmlcast\"",
    "\"xmlconcat\"",
    "\"xmlcomment\"",
    "\"xmldocument\"",
    "\"xmlelement\"",
    "\"xmlexists\"",
    "\"xmlforest\"",
    "\"xmliterate\"",
    "\"xmlnamespaces\"",
    "\"xmlparse\"",
    "\"xmlpi\"",
    "\"xmlquery\"",
    "\"xmlserialize\"",
    "\"xmltable\"",
    "\"xmltext\"",
    "\"xmlvalidate\"",
    "\"datalink\"",
    "\"dlnewcopy\"",
    "\"dlpreviouscopy\"",
    "\"dlurlcomplete\"",
    "\"dlurlcompletewrite\"",
    "\"dlurlcompleteonly\"",
    "\"dlurlpath\"",
    "\"dlurlpathwrite\"",
    "\"dlurlpathonly\"",
    "\"dlurlscheme\"",
    "\"dlurlserver\"",
    "\"dlvalue\"",
    "\"import\"",
    "\"instead\"",
    "\"enabled\"",
    "\"disabled\"",
    "\"view\"",
    "\"key\"",
    "\"serial\"",
    "\"textagg\"",
    "\"count\"",
    "\"row_number\"",
    "\"rank\"",
    "\"dense_rank\"",
    "\"sum\"",
    "\"avg\"",
    "\"min\"",
    "\"max\"",
    "\"every\"",
    "\"stddev_pop\"",
    "\"stddev_samp\"",
    "\"var_samp\"",
    "\"var_pop\"",
    "\"document\"",
    "\"content\"",
    "\"trim\"",
    "\"empty\"",
    "\"ordinality\"",
    "\"path\"",
    "\"first\"",
    "\"last\"",
    "\"next\"",
    "\"substring\"",
    "\"extract\"",
    "\"to_chars\"",
    "\"to_bytes\"",
    "\"timestampadd\"",
    "\"timestampdiff\"",
    "\"querystring\"",
    "\"namespace\"",
    "\"result\"",
    "\"index\"",
    "\"accesspattern\"",
    "\"auto_increment\"",
    "\"wellformed\"",
    "\"sql_tsi_frac_second\"",
    "\"sql_tsi_second\"",
    "\"sql_tsi_minute\"",
    "\"sql_tsi_hour\"",
    "\"sql_tsi_day\"",
    "\"sql_tsi_week\"",
    "\"sql_tsi_month\"",
    "\"sql_tsi_quarter\"",
    "\"sql_tsi_year\"",
    "\"texttable\"",
    "\"arraytable\"",
    "\"selector\"",
    "\"skip\"",
    "\"width\"",
    "\"passing\"",
    "\"name\"",
    "\"encoding\"",
    "\"columns\"",
    "\"delimiter\"",
    "\"quote\"",
    "\"header\"",
    "\"nulls\"",
    "\"objecttable\"",
    "\"version\"",
    "\"including\"",
    "\"excluding\"",
    "\"xmldeclaration\"",
    "\"variadic\"",
    "\"exception\"",
    "\"raise\"",
    "\"chain\"",
    "\"jsonarray_agg\"",
    "\"jsonobject\"",
    "<ALL_IN_GROUP>",
    "<ID>",
    "<QUOTED_ID>",
    "<ID_PART>",
    "<ESCAPEDFUNCTION>",
    "<ESCAPEDJOIN>",
    "<ESCAPEDTYPE>",
    "<DECIMALVAL>",
    "<FLOATVAL>",
    "<STRINGVAL>",
    "<LETTER>",
    "<DIGIT>",
    "<UNSIGNEDINTEGER>",
    "<BINARYSTRINGVAL>",
    "<HEXIT>",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"<>\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"?\"",
    "\"$\"",
    "\";\"",
    "\":\"",
    "\"||\"",
  };

}
